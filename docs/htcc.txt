-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/falgon/htcc#readme</a>
@package htcc
@version 0.0.0.1


module C.Token

-- | Token type
data Token i
TKReserved :: Char -> Token i
TKNum :: i -> Token i

-- | Tokenize from <a>String</a>. If it fails, the Left that wraps the
--   value representing that point is returned.
tokenize :: Read i => String -> Either Int [Token i]
instance GHC.Show.Show i => GHC.Show.Show (C.Token.Token i)
instance GHC.Classes.Eq i => GHC.Classes.Eq (C.Token.Token i)


module C.Parse

-- | Syntax tree type
data ATKind a
ATAdd :: ATKind a
ATSub :: ATKind a
ATMul :: ATKind a
ATDiv :: ATKind a
ATNum :: a -> ATKind a

-- | Abstract syntax tree
data ATree a
ATEmpty :: ATree a
ATNode :: ATKind a -> ATree a -> ATree a -> ATree a

-- | Constructs the abstract syntax tree based on the list of token
--   strings. if construction fails, <a>Nothing</a> is returned.
parse :: [Token i] -> Maybe (ATree i)


module C.Generate

-- | Simulate the stack machine by traversing an abstract syntax tree and
--   output assembly codes.
generate :: Show i => ATree i -> IO ()


module C.Utils

-- | Standard error output shortcut
putStrLnErr :: String -> IO ()

-- | Standard error output and exit shortcut
err :: String -> IO ()

module Paths_htcc
version :: Version
getBinDir :: IO FilePath
getLibDir :: IO FilePath
getDynLibDir :: IO FilePath
getDataDir :: IO FilePath
getLibexecDir :: IO FilePath
getDataFileName :: FilePath -> IO FilePath
getSysconfDir :: IO FilePath
