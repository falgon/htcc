{-# LANGUAGE OverloadedStrings #-}
module Main where

import Tests.Utils
import qualified Tests.Test1 as StatementEqual
import qualified Tests.Test2 as LinkFuncRet
import qualified Tests.Test3 as LinkFuncStdOut

main :: IO ()
main = runTestsEx [
    (StatementEqual.test "int main() { return 42; }", 42),
    (StatementEqual.test "int main() { return 1+2; }", 3),
    (StatementEqual.test "int main() { return 1+2+4; }", 7),
    (StatementEqual.test "int main() { return 10-7+3; }", 6),
    (StatementEqual.test "int main() { return 42+23-30; }", 35),
    (StatementEqual.test "int main() { return 42/2+2-5; }", 18),
    (StatementEqual.test "int main() { return (3+5)/2; }", 4),
    (StatementEqual.test "int main() { return (4-2)*8+20/4; }",21),
    (StatementEqual.test "int main() { return -(-3*+5); }", 15),
    (StatementEqual.test "int main() { return -25+30; }", 5),
    (StatementEqual.test "int main() { return 42 == 42; }", 1),
    (StatementEqual.test "int main() { return 42 != 53; }", 1),
    (StatementEqual.test "int main() { return 42 < 53; }", 1),
    (StatementEqual.test "int main() { return 53 > 42; }", 1),
    (StatementEqual.test "int main() { return 42 <= 42; }", 1),
    (StatementEqual.test "int main() { return 32 <= 42; }", 1),
    (StatementEqual.test "int main() { return 42 >= 42; }", 1),
    (StatementEqual.test "int main() { return 53 >= 42; }", 1),
    (StatementEqual.test "int main() { return (1 + 1) == 2; }", 1),
    (StatementEqual.test "int main() { return (2 * 3) != 2; }", 1),
    (StatementEqual.test "int main() { int a=42; int b=20; return a+b; }", 62),
    (StatementEqual.test "int main() { int a=42; int b=20; int c=32; return (a - c) * b / 10; }", 20),
    (StatementEqual.test "int main() { int hoge=42; int foo=20; return hoge - foo; }", 22),
    (StatementEqual.test "int main() { int returnx = 42; return returnx; return 53; }", 42),
    (StatementEqual.test "int main() { int a = 3; int b = 5 * 6 - 8; return a + b / 2; }", 14),
    (StatementEqual.test "int main() { if (1) return 42; return 53; }", 42),
    (StatementEqual.test "int main() { if (20*3-60) return 42; return 53; }", 53),
    (StatementEqual.test "int main() { int a = 1; int b = 2; if (a) return b; return 42; }", 2),
    (StatementEqual.test "int main() { if (1) return 42; else return 53; }", 42),
    (StatementEqual.test "int main() { if (0) return 42; else return 53; }", 53),
    (StatementEqual.test "int main() { int a = 0; int b = 2; if (a) return b; else return b * 2; }", 4),
    (StatementEqual.test "int main() { int a = 1; int b = 0; if (b) return 42; if (0) return 42; else return a; }", 1),
    (StatementEqual.test "int main() { int a = 1; int b = 2; if (a) if (b) return b; else return 53; else return 24; }", 2),
    (StatementEqual.test "int main() { if (1) if (1) if (1) if (1) if (1) if (0) return 1; else return 2; else return 3; else return 4; else return 5; else return 6; else return 7; }", 2),
    (StatementEqual.test "int main() { if(1)if(1)return 42;return 53; }", 42),
    (StatementEqual.test "int main() { if(0); return 0; }", 0),
    (StatementEqual.test "int main() { int a = 1; while (a < 10) a = a + 1; return a; }", 10),
    (StatementEqual.test "int main() { int a = 1; while (a < 10) a = a + 1; int b = 1; while (b < 20) b = b + 2; return a + b; }", 31),
    (StatementEqual.test "int main() { int a = 0; while (a); return 0; }", 0),
    (StatementEqual.test "int main() { int a = 0; int i = 0; for (i = 1; i <= 10; i = i + 1) a = a + i * 2; return a; }", 110),
    (StatementEqual.test "int main() { int i = 0; for (; i <= 10;) i = i + 2; return i; }", 12),
    (StatementEqual.test "int main() { int i = 0; for (; i <= 10; i = i + 2);  return i; }", 12),
    (StatementEqual.test "int main() { int a = 0; int i = 0; for (i = 0; i < 10; i = i + 1) if (a) a = 0; else a = 1; return a; }", 0),
    (StatementEqual.test "int main() { { int a = 42; int b = 2; return a / b; } }", 21),
    (StatementEqual.test "int main() { int a = 0; int i = 0; for (i = 0; i < 10; i = i + 1) { a = a + i; a = a - i; } return a; }", 0),
    (StatementEqual.test "int main() { int a = 10; if (a) { a = a * a; a = a / 10; } return a; }", 10),
    (StatementEqual.test "int main() { int a = 0; while (1) { if (a < 10) a = a + 1; else return a; } }", 10),
    (StatementEqual.test "int main() { int a = 0; for (;;) { a = 42; return a; } return a; }", 42),
    (StatementEqual.test "int main() { int a = 0; for (;;) { if (a < 10) a = a + 1; else return a; } }", 10),
    (LinkFuncRet.test "int main() { int a = test_func1(); test_func1(); return a; }" ["test_func1"], 0),
    (StatementEqual.test "int main() { int a = 1; int b = 1; return a & b; }", 1),
    (StatementEqual.test "int main() { int a = 42; int b = 53; a = a ^ b; b = b ^ a; a = a ^ b; if (a == 53) if (b == 42) return 1; return 0; }", 1),
    (StatementEqual.test "int main() { return 1 | 0; }", 1),
    (StatementEqual.test "int main() { int a = 1; int b = 0; return a & b ^ a | b; }", 1), -- Xor swap
    (StatementEqual.test "int main() { int a = 0; int i = 0; for (i = 0; i < 10; i = i + 1) if (i % 2 == 0) a = a + i; return a; }", 20),
    (StatementEqual.test "int main() { return !0; }", 1),
    (StatementEqual.test "int main() { return !42; }", 0),
    (StatementEqual.test "int main() { return !!!0; }", 1),
    (StatementEqual.test "int main() { return ~(-42); }", 41),
    (StatementEqual.test "int main() { return ~~~~42; }", 42),
    (StatementEqual.test "int main() { return (2 * 4) == (2 << 2); }", 1),
    (StatementEqual.test "int main() { return (8 / 4) == (8 >> 2); }", 1),
    (StatementEqual.test "int main() { int a = 2 << 4; return (a & (a - 1)) == 0; }", 1), -- Determining if an integer is a power of 2
    (StatementEqual.test "int main() { 1; {2;} return 3; }", 3),
    -- (LinkFuncRet.test "int main() { return sum7(1, 1, 1, 1, 1, 1, 1); }" ["test_func3"], 7),
    (LinkFuncRet.test "int main() { return test_func2(40); }" ["test_func2"], 0),
    -- (LinkFuncRet.test "int main() { return test_func2(sum7(1, 2, 3, 4, 5, 6, 7)); }" ["test_func2", "test_func3"], 0),
    -- (LinkFuncRet.test "int main() { return sum16(1,1,1,1,1,1,11,10,9,8,7,6,5,4,3,2); }" ["test_func3"], 11),
    (StatementEqual.test "int f() { return 42; } int main() { return f(); }", 42),
    (StatementEqual.test "int g() { return 42; } int f() { return g(); } int main() { return f(); }", 42),
    (StatementEqual.test "int id(int a) { return a;} int main() { int a = 1; return id(a-1) + id(1); }", 1),
    (StatementEqual.test "int get1() { return 1; } int get2() { return 2; } int main() { int a = get1(); return a + get2(); }", 3),
    (StatementEqual.test "int add(int a, int b) { return a + b; } int main() { return add(1, 2); }", 3),
    (StatementEqual.test "int rec(int a) { if (a == 0) return 42; return rec(a - 1); } int main() { int b = rec(2); return 1 + 2; }", 3),
    (StatementEqual.test "int fib(int n) { if (n == 0) return 1; else if (n == 1) return 1; else if (n >= 2) return fib(n - 1) + fib(n - 2); else return 0; } int main() { return fib(5); }", 8), -- fibonacci number
    (StatementEqual.test "int main() { int a = 42; int* b = &a; return *b; }", 42),
    (StatementEqual.test "int main() { int a = 42; return *&a; }", 42),
    (StatementEqual.test "int main() { int a = 42; int* b = &a; int** c = &b; return **c; }", 42),
    (StatementEqual.test "int main() { int a = 42; int* b = &a; *b = a * 2; return a; }", 84),
    (StatementEqual.test "int main() { int a = 42; int b = 5; return *(&b+1); }", 42),
    (StatementEqual.test "int main() { int a = 42; int b = 5; *(&a-1) = 53; return b; }", 53),
    (StatementEqual.test "int main() { int a = 42; int b = 5; *(&b+1) = 53; return a; }", 53),
    (StatementEqual.test "int main() { int sum = 0; for (int i = 1; i < 4; i = i + 1) sum = sum + i; return sum; }", 6)
    ] >> runTestsEx [
    (LinkFuncStdOut.test "int main() { return test_func1(); }" ["test_func1"], Right "test/Tests/csrc/test_func1.c::test_func1(): [OK]"),
    (LinkFuncStdOut.test "int main() { return test_func2(40); }" ["test_func2"], Right "test/Tests/csrc/test_func2.c::test_func2(40) outputs: \"2 3 5 7 11 13 17 19 23 29 31 37 \": [OK]") --,
    -- (LinkFuncStdOut.test "int main() { return test_func2(sum7(1, 2, 3, 4, 5, 6, 7)); }" ["test_func2", "test_func3"], Right "test/Tests/csrc/test_func2.c::test_func2(28) outputs: \"2 3 5 7 11 13 17 19 23 \": [OK]")
    ]
